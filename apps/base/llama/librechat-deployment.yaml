apiVersion: apps/v1
kind: Deployment
metadata:
  name: librechat
  labels: { app: llama, component: librechat }
spec:
  replicas: 2
  selector:
    matchLabels: { app: llama, component: librechat }
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels: { app: llama, component: librechat }
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels: { app: llama, component: librechat }
              topologyKey: kubernetes.io/hostname
      containers:
        - name: librechat
          image: ghcr.io/danny-avila/librechat:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3080
              name: http
          envFrom:
            - secretRef: { name: librechat-env }
          volumeMounts:
            - name: librechat-config
              mountPath: /app/librechat.yaml
              subPath: librechat.yaml
            - name: librechat-data
              mountPath: /app/client/public/uploads
          resources:
            requests: { cpu: "250m", memory: "512Mi" }
            limits:   { cpu: "1",    memory: "2Gi" }
          readinessProbe:
            httpGet: { path: /health, port: http }
            initialDelaySeconds: 10
            periodSeconds: 10
      volumes:
        - name: librechat-config
          configMap: { name: librechat-config, items: [ { key: librechat.yaml, path: librechat.yaml } ] }
        - name: librechat-data
          persistentVolumeClaim: { claimName: librechat-data }

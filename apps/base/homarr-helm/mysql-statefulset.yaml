apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: homarr-helm-mysql
  labels:
    app: homarr-helm
    component: mysql
spec:
  replicas: 1
  serviceName: homarr-helm-mysql
  selector:
    matchLabels:
      app: homarr-helm
      component: mysql
  template:
    metadata:
      labels:
        app: homarr-helm
        component: mysql
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsGroup: 999
      containers:
        - name: mysql
          image: docker.io/library/mysql:8.4
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3306
              name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: homarr-helm-mysql
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: homarr-helm-mysql
                  key: MYSQL_DATABASE
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: homarr-helm-mysql
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: homarr-helm-mysql
                  key: MYSQL_PASSWORD
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - "mysqladmin ping -h 127.0.0.1 -uroot -p${MYSQL_ROOT_PASSWORD}"
            initialDelaySeconds: 20
            periodSeconds: 10
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - "mysqladmin ping -h 127.0.0.1 -uroot -p${MYSQL_ROOT_PASSWORD}"
            initialDelaySeconds: 30
            periodSeconds: 10
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
            limits:
              cpu: "2"
              memory: 2Gi
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          recurring-job.longhorn.io/source: enabled
          recurring-job-group.longhorn.io/default: enabled
        annotations:
          argocd.argoproj.io/sync-wave: "-2"
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: longhorn-protected
        resources:
          requests:
            storage: 10Gi

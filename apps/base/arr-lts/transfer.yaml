apiVersion: batch/v1
kind: Job
metadata:
  name: transfer-orphan
  namespace: arr-lts
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  template:
    spec:
      nodeName: miniserver
      restartPolicy: Never
      volumes:
      - name: dev
        hostPath: { path: /dev }
      - name: proc
        hostPath: { path: /proc }
      - name: replica
        hostPath: { path: /srv/longhorn/replicas/pvc-f61154fe-0598-4a91-84e5-2a104a481d68-3b619043 }  # orphan dir here
      - name: dest
        persistentVolumeClaim:
          claimName: qbit-config
      containers:

      # 1) Longhorn exporter (makes /host/dev/longhorn/<VOL>)
      - name: engine
        image: longhornio/longhorn-engine:v1.9.1
        securityContext: { privileged: true }
        volumeMounts:
        - { name: dev,     mountPath: /host/dev }
        - { name: proc,    mountPath: /host/proc }
        - { name: replica, mountPath: /volume }
        command: ["/bin/sh","-lc"]
        args:
          - |
            set -euo pipefail
            VOL=copy-replica
            SIZE=1073741824     # from volume.meta
            # bind host /dev so the device appears under /host/dev/longhorn/<VOL>
            mount --rbind /host/dev /dev
            # Run exporter in foreground so this container stays alive
            launch-simple-longhorn "$VOL" "$SIZE"

      # 2) Copier (waits for device, mounts RO, rsyncs to PVC)
      - name: copy
        image: alpine:3.20
        securityContext: { privileged: true }   # needed for mount
        volumeMounts:
        - { name: dev,  mountPath: /host/dev }
        - { name: dest, mountPath: /dest }
        command: ["/bin/sh","-lc"]
        args:
          - |
            set -euo pipefail
            VOL=copy-replica
            DEV=/host/dev/longhorn/$VOL

            # Tools
            apk add --no-cache rsync util-linux e2fsprogs xfsprogs

            echo "Waiting for $DEV to become a *block device* with non-zero size…"
            for i in $(seq 1 120); do
              if [ -b "$DEV" ]; then
                SZ=$(blockdev --getsize64 "$DEV" 2>/dev/null || echo 0)
                if [ "${SZ:-0}" -gt 0 ]; then
                  echo "Device ready (size=${SZ} bytes)"; break
                fi
              fi
              [ $i -eq 120 ] && { echo "Timed out waiting for device"; exit 1; }
              sleep 2
            done

            mkdir -p /mnt/src
            echo "Attempting read-only mount…"
            ok=0
            for i in $(seq 1 10); do
              mount -o ro "$DEV" /mnt/src 2>/tmp/merr || \
              mount -t ext4 -o ro "$DEV" /mnt/src 2>>/tmp/merr || \
              mount -t xfs  -o ro "$DEV" /mnt/src 2>>/tmp/merr || true
              if mountpoint -q /mnt/src; then ok=1; break; fi
              echo "Mount attempt $i failed; retrying in 2s"; cat /tmp/merr || true; sleep 2
            done
            [ "$ok" = "1" ] || { echo "Mount failed after retries"; cat /tmp/merr || true; exit 1; }

            echo "Source filesystem:"
            df -hT /mnt/src || true
            echo "Destination filesystem:"
            df -hT /dest || true

            echo "Copying (rsync -aHAXS)…"
            rsync -aHAXS --info=progress2 /mnt/src/ /dest/
            echo "Copy complete"